Service Player	
Types : bool, int, enum Status{LIVING, DEAD, SAVED},
				   enum Specialty{CLIMBER, DIGGER, STOPPER,	BASHER,	BUILDER, MINER, FLOATER, BOMBER}
Observators :
	getSpecials : [Player] -> Set<Specialty>
	getJetons : [Player] -> Map<Class, int>
	getNbJetonsFor : [Player] x Class -> int
	getEngine : [Player] -> GameEngine
Constructors :
	init : Map<Specialty, int> -> [Level]
		pre init(map) require \forall val in map val >= 0
Operators : 
	transform : [Player] x [Lemming] x Specialty  -> [Player]
		pre transform(p, lem, sp) require Lemming : getStatus(lem) == LIVING ^ getNbJetonsFor(p, sp) > 0
Observations : 
	[invariants]
		\forall c in getClasses getNbJetonsFor(c) >= 0
	[init] 
		\forall sp in getSpecials(init(map)) :  getNbJetonsFor(init(map), sp)) == getValue(map, sp)  
	[transform]
		getNbJetonsFor(transform(p, eng, c, i)) == getNbJetonsFor(p) - 1
		\forall d in (getSpecials(p) - {c}) getNbJetonsFor(transform(p, eng, c, i)) == getNbJetonsFor(p, d)
		
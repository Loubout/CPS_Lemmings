Service : Lemming

Types : bool, int, enum Status{LIVING, DEAD, SAVED}, 
				   enum Direction {RIGHT, LEFT}, 
				   enum Type{WALKER, FALLER, DIGGER}
				   enum Specialty{CLIMBER, DIGGER, STOPPER,	BASHER,	BUILDER, MINER, FLOATER, BOMBER}
				   
Observators:
    getDirection : [Lemming] -> Direction
    getNumero : [Lemming] -> int
    getType : [Lemming] -> Type
    getStatus : [Lemming] -> Status
    getX : [Lemming] -> int
    getY : [Lemming] -> int
    getFallTime : [Lemming] -> int
        pre getFallTime(l) require getType(l) == FALLER
    getSpecials : [Lemming] -> Set<Specialty>    
    getNbStep : [Lemming] -> int
Constructors:
    init : Type x int -> [Lemming]
Operators:
	transform [Lemming] x Specialty -> [Lemming]
		pre transform(lem, sp) require getStatus(lem) == LIVING ^ not sp \belongs getSpecials(lem)
    step : [Lemming] -> [Lemming]
        pre step(lem) require getStatus(lem) == LIVING 
Observations:
    [invariant]
        Level : getNature (getX(l),getY(l) - 1) == EMPTY
    [init]
        getType(init(t, x)) == t
        getDirection(init(t, x)) == RIGHT
        getNumero(init(t, x)) == x
        getSpecials(init(t,x)) == emptySet
        getNbStep(init(t,x)) == 0
    [transform]
    	getSpecials(transform(l, sp)) == getSpecials(l) + sp
    [step]   
        - if getType(l) == WALKER then :  
            if  GameEng : isObstacle (getX(l),getY(l) + 1) == FALSE then :
                getType(step(l)) == FALLER ^ getFallTime(step(l)) == 0
            else if getDirection(l) == RIGHT ^ GameEng : isObstacle (getX(l) + 1,getY(l) - 1) then :
                getDirection(step(l)) == LEFT
            else if getDirection(l) == LEFT ^ GameEng : isObstacle (getX(l) - 1,getY(l) - 1) then :
                getDirection(step(l)) == RIGHT
            else if getDirection(l) == RIGHT ^ GameEng : isObstacle (getX(l) + 1,getY(l)) ^ GameEng : isObstacle (getX(l) + 1,getY(l) - 2) then :
                getDirection(step(l)) == LEFT
            else if getDirection(l) == LEFT ^ GameEng : isObstacle (getX(l) - 1,getY(l)) ^ GameEng : isObstacle (getX(l) - 1,getY(l) - 2) then :
                getDirection(step(l)) == RIGHT
            else if getDirection(l) == RIGHT ^ GameEng : isObstacle (getX(l) + 1,getY(l)) ^ GameEng : isObstacle (getX(l) + 1,getY(l) - 1) == FALSE ^ GameEng : isObstacle (getX(l) + 1,getY(l) - 2) == FALSE  then :
                getY(step(l)) == getY(l) - 1 ^  getX(step(l)) == getX(l) + 1
            else if getDirection(l) == LEFT ^ GameEng : isObstacle (getX(l) - 1,getY(l)) ^ GameEng : isObstacle (getX(l) - 1,getY(l) - 1) == FALSE ^ GameEng : isObstacle (getX(l) - 1,getY(l) - 2) == FALSE   then :
                getY(step(l)) == getY(l) - 1 ^  getX(step(l)) == getX(l) - 1
            else if getDirection(l) == RIGHT ^ GameEng : isObstacle (getX(l) + 1,getY(l)) == FALSE ^ GameEng : isObstacle (getX(l) + 1,getY(l) - 1) == FALSE then
                getDirection(step(l))  == RIGHT ^ getX(step(l)) == getX(l) + 1
            else if getDirection(l) == LEFT ^ GameEng : isObstacle (getX(l) - 1,getY(l)) == FALSE ^ GameEng : isObstacle (getX(l) - 1,getY(l) - 1) == FALSE then
                getDirection(step(l))  == LEFT ^ getX(step(l)) == getX(l) - 1
        - else 
            if getType(l) == FALLER then :
                if GameEng : isObstacle(getX(l), getY(l) + 1) ^ getFallTime(l) < 8 then:
                    getType(step(l)) == WALKER  
                else if GameEng : isObstacle(getX(l), getY(l) + 1) ^ getFallTime(l) >= 8 then:
                    getStatus(step(l)) == DEAD
                else 
                    getY(step(l)) == getY(l) + 1 ^ getFallTime(step(l)) == getFallTime(l) + 1
        - else 
            if getType(l) == DIGGER then :
                if Level : getNature(getX(l), getY(l) + 1) == EMPTY then :
                    getType(step(l)) == FALLER 
                if Level : getNature(getX(l), getY(l) + 1) == METAL then :
                    getType(step(l)) == WALKER
                if Level : getNature(getX(l), getY(l) + 1) == DIRT then :
                    Level : remove(getX(l), getY(l) + 1) 
                    if getNature(getX(l) - 1, getY(l) + 1) == DIRT then :
                        Level : remove(getX(l) - 1, getY(l) + 1)
                    if getNature(getX(l) + 1, getY(l) + 1) == DIRT then :
                        Level : remove(getX(l) + 1, getY(l) + 1)
         - else 
            if getType(l) == CLIMBER then :
                if GameEng : isObstacle(getX(l)+1, getY(l)) ^ 
                   GameEng : isObstacle(getX(l)+1, getY(l)-1) ^
                   ! GameEng: isObstacle(getX(l), getY(l)-1) ^ 
                   ! GameEng: isObstacle(getX(l), getY(l)-2) then :
                    getY(step(l)) == getY(l) - 1
                if GameEng : isObstacle(getX(l)-1, getY(l)) ^ 
                   GameEng : isObstacle(getX(l)-1, getY(l)-1) ^
                   ! GameEng: isObstacle(getX(l), getY(l)-1) ^ 
                   ! GameEng: isObstacle(getX(l), getY(l)-2) then :
                    getY(step(l)) == getY(l) - 1
         - else
         	if getType(l) == STOPPER then :
         		getY(step(l)) == getY(l) ^
         		getX(step(l)) == getX(l)
         - else 
         	if getType(l) == BASHER:
         		if not GameEng : isObstacle(getX(l), getY(l) + 1) :
         			getType(step(l)) == FALLER
         		else if getDirection(l) == RIGHT:
         			if not (GameEng : getNature(getX(l) + 1, getY(l) == METAL)
         			   	^ GameEng : getNature(getX(l) + 1, getY(l) - 1 == METAL)
         			   	^ GameEng : getNature(getX(l) + 1, getY(l) - 2 == METAL)) :
         			   	getX(step(l)) == getX(l) + 1
         			   	^ GameEng : getNature(getX(step(l)), getY(step(l)) == EMPTY)
         			   	^ GameEng : getNature(getX(step(l), getY(step(l) - 1) == EMPTY)
         			   	^ GameEng : getNature(getX(step(l)), getY(step(l) - 2 ) == EMPTY)) 
         			else :
         				getType(step(l)) == WALKER
         		else 
         			if not (GameEng : getNature(getX(l) - 1, getY(l) == METAL)
         			   	^ GameEng : getNature(getX(l) - 1, getY(l) - 1 == METAL)
         			   	^ GameEng : getNature(getX(l) - 1, getY(l) - 2 == METAL)) :
         			   	getX(step(l)) == getX(l) - 1
         			   	^ GameEng : getNature(getX(step(l)), getY(step(l)) == EMPTY)
         			   	^ GameEng : getNature(getX(step(l), getY(step(l) - 1) == EMPTY)
         			   	^ GameEng : getNature(getX(step(l)), getY(step(l) - 2 ) == EMPTY)) 
         			else :
         				getType(step(l)) == WALKER
         - else
         	if getType(l) == BUILDER:
         		
         - else  
         				
         			   	
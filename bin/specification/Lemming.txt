Service : Lemming

Types : bool, int, enum Status{LIVING, DEAD, SAVED}, 
				   enum Direction {RIGHT, LEFT}, 
				   enum Type{WALKER, FALLER, CLIMBER, DIGGER, STOPPER,  BASHER, BUILDER, MINER, FLOATER}
				   enum Specialty{CLIMBER, DIGGER, STOPPER,	BASHER,	BUILDER, MINER, FLOATER, BOMBER}
				   
Observators:
    getDirection : [Lemming] -> Direction
    getNumero : [Lemming] -> int
    getType : [Lemming] -> Type
    getStatus : [Lemming] -> Status
    getX : [Lemming] -> int
    	pre require getStatus(l) == LIVING
    getY : [Lemming] -> int
    	pre require getStatus(l) == LIVING
    getFallTime : [Lemming] -> int
        pre getFallTime(l) require getType(l) == FALLER ^ getStatus(l) == LIVING
    getSpecials : [Lemming] -> Set<Specialty>    
    hasSpecial : [Lemming] x Speciaty -> bool
    getBombCounter : [Lemming] -> int
    	pre getBombCounter(l) require hasSpecial(l, BOMBER)
    getNbBuild : [Lemming] -> int
    	pre getNbBuild(l) require getType(l) == BUILDER
    getNbBash : [Lemming] -> int
    	pre getNbBash(l) require getType(l) == BASHER
    getEngine : [Lemming] -> [GameEng]
    
Constructors:
    init : Type x int -> [Lemming]
Operators:
	transform [Lemming] x Specialty -> [Lemming]
		pre transform(lem, sp) require getStatus(lem) == LIVING ^ not sp \belongs getSpecials(lem)
    step : [Lemming] -> [Lemming]
        pre step(lem) require getStatus(lem) == LIVING 
Observations:
    [invariant]
        Level : getNature (getX(l),getY(l) - 1) == EMPTY
    [init]
        getType(init(t, x)) == t
        getDirection(init(t, x)) == RIGHT
        getNumero(init(t, x)) == x
        getSpecials(init(t,x)) == emptySet
        getBombCounter(init(t,x)) == 0
        getNbBuild(init(t,x)) == 0
        getNbBash(init(t,x)) == 0
    [transform]
    	getSpecials(transform(l, sp)) == getSpecials(l) + sp
    [step]
        - if BOMBER \belongs getSpecials(l) ^ getBombCounter(l) == 5  then :
            getStatus(step(l)) == DEAD
        - else if BOMBER \belongs getSpecials(l) ^ getBombCounter(l) != 5 then : 
            getBombCounter(step(l)) == getBombCounter(l) + 1
            
            
        - else if STOPPER \belongs getSpecials(l) ^ getType(l) != STOPPER then:
            getType(step(l)) = STOPPER
        - else if BUILDER \belongs getSpecials(l) ^ getType(l) != BUILDER then:
            getType(step(l)) = BUILDER
        - else if DIGGER \belongs getSpecials(l) ^ getType(l) != DIGGER then:
            getType(step(l)) = DIGGER
        - else if CLIMBER \belongs getSpecials(l) ^ getType(l) != CLIMBER then:
            getType(step(l)) = CLIMBER
        - else if FLOATER \belongs getSpecials(l) ^ getType(l) != FLOATER then:
            getType(step(l)) = FLOATER
        - else if BASHER \belongs getSpecials(l) ^ getType(l) != BASHER then:
            getType(step(l)) = BASHER
        - else if MINER \belongs getSpecials(l) ^ getType(l) != MINER then:
            getType(step(l)) = MINER
            
        -else
            if getType(l) == WALKER then :
                if CLIMBER \belongs getSpecials(l) then :
                    if getDirection(l) == RIGHT ^ GameEng : isObstacle(getEngine(l), getX(l)+1, getY(l)-1) ^ not GameEng : isObstacle(getEngine(l), getX(l)+1, getY(l)-2) then:
                        getX(step(l)) = getX(l) + 1 ^ getY(step(l)) = getY(l) - 1
                    else  if getDirection(l) == LEFT ^ GameEng : isObstacle(getEngine(l), getX(l)-1, getY(l)-1) ^ not GameEng : isObstacle(getEngine(l), getX(l)-1, getY(l)-2) then:
                        getX(step(l)) = getX(l) - 1 ^ getY(step(l)) = getY(l) - 1
                
                if  not GameEng : isObstacle(getEngine(l), getX(l),getY(l) + 1) then :
                    getType(step(l)) == FALLER ^ getFallTime(step(l)) == 0
                else if getDirection(l) == RIGHT ^ GameEng : isObstacle(getEngine(l), getX(l) + 1,getY(l) - 1) then :
                    getDirection(step(l)) == LEFT
                else if getDirection(l) == LEFT ^ GameEng : isObstacle(getEngine(l), getX(l) - 1,getY(l) - 1) then :
                    getDirection(step(l)) == RIGHT
                else if getDirection(l) == RIGHT ^ GameEng : isObstacle(getEngine(l), getX(l) + 1,getY(l)) ^ GameEng : isObstacle(getEngine(l), getX(l) + 1,getY(l) - 2) then :
                    getDirection(step(l)) == LEFT
                else if getDirection(l) == LEFT ^ GameEng : isObstacle(getEngine(l), getX(l) - 1,getY(l)) ^ GameEng : isObstacle(getEngine(l), getX(l) - 1,getY(l) - 2) then :
                    getDirection(step(l)) == RIGHT
                else if getDirection(l) == RIGHT ^ GameEng : isObstacle(getEngine(l), getX(l) + 1,getY(l)) ^ GameEng : isObstacle(getEngine(l), getX(l) + 1,getY(l) - 1) == FALSE ^ GameEng : isObstacle(getEngine(l), getX(l) + 1,getY(l) - 2) == FALSE  then :
                    getY(step(l)) == getY(l) - 1 ^  getX(step(l)) == getX(l) + 1
                else if getDirection(l) == LEFT ^ GameEng : isObstacle(getEngine(l), getX(l) - 1,getY(l)) ^ GameEng : isObstacle(getEngine(l), getX(l) - 1,getY(l) - 1) == FALSE ^ GameEng : isObstacle(getEngine(l), getX(l) - 1,getY(l) - 2) == FALSE   then :
                    getY(step(l)) == getY(l) - 1 ^  getX(step(l)) == getX(l) - 1
                else if getDirection(l) == RIGHT ^ GameEng : isObstacle(getEngine(l), getX(l) + 1,getY(l)) == FALSE ^ GameEng : isObstacle(getEngine(l), getX(l) + 1,getY(l) - 1) == FALSE then
                    getDirection(step(l))  == RIGHT ^ getX(step(l)) == getX(l) + 1
                else if getDirection(l) == LEFT ^ GameEng : isObstacle(getEngine(l), getX(l) - 1,getY(l)) == FALSE ^ GameEng : isObstacle(getEngine(l), getX(l) - 1,getY(l) - 1) == FALSE then
                    getDirection(step(l))  == LEFT ^ getX(step(l)) == getX(l) - 1
      
        - else 
            if getType(l) == FALLER then :
                if GameEng : isObstacle(getEngine(l), getX(l), getY(l) + 1) ^ getFallTime(l) < 8 then:
                    getType(step(l)) == WALKER  
                     if CLIMBER \belongs getSpecials(l) then :
                        if getDirection(l) == RIGHT then :
                            getDirection(step(l) == LEFT
                        else if getDirection(l) == LEFT then :
                            getDirection(step(l) == RIGHT
                        getFallTime(step(l) == 0)
                else if GameEng : isObstacle(getEngine(l), getX(l), getY(l) + 1) ^ getFallTime(l) >= 8 then:
                    getStatus(step(l)) == DEAD
                else 
                    getY(step(l)) == getY(l) + 1 ^ getFallTime(step(l)) == getFallTime(l) + 1
        
        - else 
            if getType(l) == FLOATER then :
                if not GameEng : isObstacle(getEngine(l), getX(l), getY(l) + 1) then:
                    if getFallTime(l) % 2 == 0 then : 
                        getY(step(l)) = getY(l) + 1
                    getFallTime(step(l)) = getFallTime(l) + 1
                else 
                    getType(step(l)) = WALKER
        - else 
            if getType(l) == DIGGER then :
                if Level : getNature(getX(l), getY(l) + 1) == EMPTY then :
                    getType(step(l)) == FALLER 
                if Level : getNature(getX(l), getY(l) + 1) == METAL then :
                    getType(step(l)) == WALKER
                
         - else 
            if getType(l) == CLIMBER then :
                if getDirection(l) == RIGHT:
                    if GameEng : isObstacle(getEngine(l), getX(l)+1, getY(l)) ^ 
                       GameEng : isObstacle(getEngine(l), getX(l)+1, getY(l)-1) ^
                       ! GameEng: isObstacle(getEngine(l), getX(l), getY(l)-1) ^ 
                       ! GameEng: isObstacle(getEngine(l), getX(l), getY(l)-2) then :
                        getY(step(l)) == getY(l) - 1
                else if getDirection(l) == LEFT:
                    if GameEng : isObstacle(getEngine(l), getEngine(), getX(l)-1, getY(l)) ^ 
                       GameEng : isObstacle(getEngine(l), getX(l)-1, getY(l)-1) ^
                       ! GameEng: isObstacle(getEngine(l), getX(l), getY(l)-1) ^ 
                       ! GameEng: isObstacle(getEngine(l), getX(l), getY(l)-2) then :
                        getY(step(l)) == getY(l) - 1
                else 
                    getType(step(l)) == WALKER
         - else
         	if getType(l) == STOPPER then :
         		getY(step(l)) == getY(l) ^
         		getX(step(l)) == getX(l)
         - else 
         	if getType(l) == BASHER:
         		if not GameEng : isObstacle(getEngine(l), getX(l), getY(l) + 1) :
         			getType(step(l)) == FALLER
         		else if getDirection(l) == RIGHT:
         			if (GameEng : getNature(getX(l) + 1, getY(l) == METAL)
         			   	^ GameEng : getNature(getX(l) + 1, getY(l) - 1 == METAL)
         			   	^ GameEng : getNature(getX(l) + 1, getY(l) - 2 == METAL)) :
         			   	getType(step(l)) == WALKER
         			else : 
         			    if getnbBash(l) > 20 then :
             			    not BASHER \belongs getSpecials(step(l))
             			    ^ getType(step(l)) == WALKER
             			
         			   	else if GameEng : isDirt(getEngine(l), getX(l), getY(l))
         			   	        ^ GameEng : isDirt(getEngine(l), getX(l), getY(l)-1)
         			   	        ^ GameEng : isDirt(getEngine(l), getX(l), getY(l)-2) then :
             			   	getNbBash(step(l)) = getNbBash(l) + 1 ^ getX(step(l)) == getX(l) + 1 
         			else :
         				getType(step(l)) == WALKER
         		else if getDirection(l) == RIGHT:
                    if (GameEng : getNature(getX(l) - 1, getY(l) == METAL)
                        ^ GameEng : getNature(getX(l) - 1, getY(l) - 1 == METAL)
                        ^ GameEng : getNature(getX(l) - 1, getY(l) - 2 == METAL)) :
                        getType(step(l)) == WALKER
                    else
                        if getnbBash(l) > 20
                            not BASHER \belongs getSpecials(step(l))
                            ^ getType(step(l)) == WALKER
                        
                        else if GameEng : isDirt(getEngine(l), getX(l), getY(l))
                                ^ GameEng : isDirt(getEngine(l), getX(l), getY(l)-1)
                                ^ GameEng : isDirt(getEngine(l), getX(l), getY(l)-2) then :
                            
                            Level : remove(getX(l), getY(l))
                            ^ Level : remove(getX(l), getY(l)-1)
                            ^ Level : remove(getX(l), getY(l)-2)
                            ^ getNbBash(step(l)) = getNbBash(l) + 1
                        getX(step(l)) == getX(l) - 1 
                    else :
                        getType(step(l)) == WALKER
         - else
         	if getType(l) == BUILDER:
         		if not GameEng : isObstacle(getEngine(l), getX(l), getY(l) + 1) :
                    getType(step(l)) == FALLER
                else if getDirection(l) == RIGHT:
                    if GameEng : getNbTurn % 3 == 0 :
                        if not (GameEng : isObstacle(getEngine(l), getX(l)+1, getY(l))
                                ^ GameEng : isObstacle(getEngine(l), getX(l)+2, getY(l))
                                ^ GameEng : isObstacle(getEngine(l), getX(l)+3, getY(l))
                                ^ GameEng : isObstacle(getEngine(l), getX(l)+1, getY(l)-1)
                                ^ GameEng : isObstacle(getEngine(l), getX(l)+1, getY(l)-2)) then :
                                if GameEng : isObstacle(getEngine(l), getX(l)+1, getY(l)-2) then: 
                                    if getNbBuid(l) < 12:
                                        Level : build(getX(l)+1, getY(l))
                                        ^ Level : build(getX(l)+2, getY(l))
                                        ^ Level : build(getX(l)+3, getY(l))
                                        ^ not BUILDER \belongs getSpecials(step(l))
                                        ^ getNbBuild(step(l)) = getNbBuild(l) + 3
                                        ^ getType(step(l)) == WALKER
                                    else
                                        not BUILDER \belongs getSpecials(step(l))
                                        ^ getType(l) == WALKER
                        else
                             if getNbBuid(l) < 12:
                                         Level : build(getX(l)+1, getY(l))
                                        ^ Level : build(getX(l)+2, getY(l))
                                        ^ Level : build(getX(l)+3, getY(l))
                                        ^ not BUILDER \belongs getSpecials(step(l))
                                        ^ getNbBuild(step(l)) = getNbBuild(l) + 3
                                        ^ getX(step(l)) = getX(l) + 2
                                        ^ getY(step(l)) = getY(l) - 1
                                    else
                                        not BUILDER \belongs getSpecials(step(l))
                                        ^ getType(step(l)) == WALKER               
                       else 
                            not BUILDER \belongs getSpecials(step(l))
                            ^ getType(step(l)) == WALKER      
                else if getDirection(l) == LEFT:
                         if GameEng : getNbTurn % 3 == 0 :
                        if not (GameEng : isObstacle(getEngine(l), getX(l)-1, getY(l))
                                ^ GameEng : isObstacle(getEngine(l), getX(l)-2, getY(l))
                                ^ GameEng : isObstacle(getEngine(l), getX(l)-3, getY(l))
                                ^ GameEng : isObstacle(getEngine(l), getX(l)-1, getY(l)-1)
                                ^ GameEng : isObstacle(getEngine(l), getX(l)-1, getY(l)-2)) then :
                                if GameEng : isObstacle(getEngine(l), getX(l)-1, getY(l)-2) then: 
                                    if getNbBuid(l) < 12:
                                         Level : build(getX(l)-1, getY(l))
                                        ^ Level : build(getX(l)-2, getY(l))
                                        ^ Level : build(getX(l)-3, getY(l))
                                        ^ not BUILDER \belongs getSpecials(step(l))
                                        ^ getNbBuild(step(l)) = getNbBuild(l) + 3
                                        ^ getType(step(step(l))) == WALKER
                                    else
                                        not BUILDER \belongs getSpecials(step(l))
                                        ^ getType(step(step(l))) == WALKER
                        else
                             if getNbBuid(l) < 12:
                                         Level : build(getX(l)+1, getY(l))
                                        ^ Level : build(getX(l)+2, getY(l))
                                        ^ Level : build(getX(l)+3, getY(l))
                                        ^ not BUILDER \belongs getSpecials(step(l))
                                        ^ getNbBuild(step(l)) = getNbBuild(l) + 3
                                        ^ getX(step(l)) = getX(l) - 2
                                        ^ getY(step(l)) = getY(l) - 1
                                    else
                                        not BUILDER \belongs getSpecials(step(l))
                                        ^ getType(step(step(l))) == WALKER               
                       else 
                            not BUILDER \belongs getSpecials(step(l))
                            ^ getType(step(l)) == WALKER
        - else 
            if getType(l) == MINER:
                if not GameEng : isObstacle(getEngine(l), getX(l), getY(l) + 1) :		
         	      getType(step(l)) == FALLER
         	    else if getDirection(l) == RIGHT:
         	      if (GameEng : getNature(getX(l)+1, getY(l)-1) == DIRT
         	          ^ GameEng : getNature(getX(l)+1, getY(l)-2) == DIRT
                      ^ GameEng : getNature(getX(l)+1, getY(l)-3) == DIRT) then:
                      Level : remove(getX(l)+1, getY(l)-1)
                      ^ Level : remove(getX(l)+1, getY(l)-2)
                      ^ Level : remove(getX(l)+1, getY(l)-3)
                      ^ getX(step(l)) = getX(l) + 1
                      ^ getY(step(l)) = getY(l) - 1
                  else 
                    getType(step(l)) == WALKER
             else if getDirection(l) == LEFT:
                  if (GameEng : getNature(getX(l)-1, getY(l)-1) == DIRT
                      ^ GameEng : getNature(getX(l)-1, getY(l)-2) == DIRT
                      ^ GameEng : getNature(getX(l)-1, getY(l)-3) == DIRT):
                      Level : remove(getX(l)-1, getY(l)-1)
                      ^ Level : remove(getX(l)-1, getY(l)-2)
                      ^ Level : remove(getX(l)-1, getY(l)-3)
                      ^ getX(step(l)) = getX(l) - 1
                      ^ getY(step(l)) = getY(l) + 1
                  else 
                    getType(step(l)) == WALKER
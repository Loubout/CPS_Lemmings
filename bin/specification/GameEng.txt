Service : GameEng
Types : bool, int, enum Nature{EMPTY, DIRT, METAL},
				   enum Status{LIVING, DEAD, SAVED},
				   enum Specialty{CLIMBER, DIGGER, STOPPER,	BASHER,	BUILDER, MINER, FLOATER, BOMBER}
Observators :
    const sizeColony : [GameEng] -> int
    const spawnSpeed : [GameEng] -> int
    timeSinceLastSpawn: [GameEng] -> int
    isObstacle: [GameEng] x int x int -> bool
        pre isObstacle(e, x, y) require 0 < x < Level : width(getLevel(e)) ^ 0 < y < Level : height(getLevel(e))
    gameOver: [GameEng] -> bool
    getLevel: [GameEng] -> Level
    nbTours: [GameEng] -> int
    score: [GameEng] -> (int, int)
        pre score(e) require gameOver(e)
    nbSpawned: [GameEng -> int
    nbSauves: [GameEng] -> int   
    nbActif: [GameEng] -> int    
    getLemmingsNum : [GameEng] -> Set<Int>
    lemmingExiste: [GameEng] x int -> bool
    getLemming: [GameEng] x int -> Lemming
        pre getLemming(e, n) require lemmingExiste(e, n)
    isThereLemming : [GameEng] x int x int -> bool
    	pre isThereLemming(e, x, y) require 0 < x < Level : width(getLevel(e)) ^ 0 < y < Level : height(getLevel(e)) 
    getLemmingAtPosition : [GameEng] x int x int -> [Lemming]
    	pre getLemmingAtPosition(e, x, y) require isThereLemming(e, x, y)
    active: [GameEng] x int  -> bool
        pre active(e, n) require 1 < n =< nbActif
    
    
Constructors :
    init: int x int -> [Level]
        pre init(size, sp) require size > 0 ^ sp > 0
    
Operators :
    nextTurn : [GameEng] ->  [GameEng]
        pre nextTurn(e) require not gameOver(e)
Observations :
    [invariants]
        nbSpawned(e) =< sizeColony(e)
        nbTours(e) => 0
        nbActifs(e) =min= |getLemmingsNum(e)|
        lemmingExiste(e, n) =min= n \belongsto getLemmingsNum(e)
        gameOver(e) =min= (nbSpawned(e) == sizeColony(e)) ^ (nbActif(e) == 0)     
    [init]
        sizeColony(init(x,y)) == x
        spawnSpeed(init(x,y)) == y
        score(init(x, y)) == 0
        gameOver(init(x,y)) == FALSE
        nbTours(init(x, y)) == 0
        nbSpawned(init(x, y)) == 0
        nbSauves(init(x, y)) == 0
        nbActif(init(x, y)) == 0
        getAllLemmings(init(x, y)) == Nil
    [nextTurn]
        \forall n in getLemmingsNum(e) getLemming(nexTurn(e), n) == Lemming : step(getLemming(e, n))
         
        if (spawnSpeed(e) - timeSinceLastSpawn(e)) > 0 then
            timeSinceLastSpawn(nextTurn(e)) = timeSinceLastSpawn(e) + 1
        else 
            timeSinceLastSpawn(nextTurn(e)) = 0 
            ^ nbSpawned((nextTurn(e)) = nbSpawned(e) + 1
            ^ getLemming(e, nbSpawned(e) + 1) == Lemming : init(FALLER, nbSpawned(e) +1)
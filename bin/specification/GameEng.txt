Service : GameEng
Types : bool, int, enum Nature{EMPTY, DIRT, METAL}, enum Status{LIVING, DEAD, SAVED}
Observators :
    const sizeColony : [GameEng] -> int
    spawnSpeed : [GameEng] -> int
    obstacle: [GameEng] x int x int -> bool
    gameOver: [GameEng] -> bool
    getLevel: [GameEng] -> Level
    nbTours: [GameEng] -> int
    score: [GameEng] -> (int, int)
    nbSauvÃ©s: [GameEng] -> int    
    
    lemmings: [GameEng] -> Set<Lemming>
    active: [GameEng] x int  -> bool
    status: [GameEng] x int -> Status
    
    
    
Constructors :
    init: int x int -> [Level]
        pre init(size, sp) require size > 0 ^ sp > 0
Operators :
    setNature: [Level] x int x int x Nature -> [Level]
        pre setNature(l, x, y, n) require editing(l) == false ^ 0 =< x < width ^ 0 =< y < height
    goPlay: [Level] -> [Level]
        pre goPlay(l) require editing(l) == true ^ \forall (x, y) x = 0 || x = width -1 || y = 0 || y = height - 1, nature(l, x, y) == METAL
    remove: [Level] x int x int -> [Level]
        pre remove(l, x, y) require editing(l) == false ^ nature(l, x, y) == DIRT ^ 0 =< x < width ^ 0 =< y < height
    build: [Level] x int x int -> [Level]
        pre build(l, x , y) require editing(l) == false ^ nature(l, x, y) == EMPTY ^ 0 =< x < width ^ 0 =< y < height
Observations :
    [invariants]
    
    [init]
        editing(init(x, y)) == true
    [setNature]
        nature(setNature(l, x, y, n)) == n
    [goPlay]
        editing(goPlay(l)) == false
    [remove]
        nature(remove(l, x , y)) == EMPTY
    [build]
        nature(remove(l, x , y)) == DIRT